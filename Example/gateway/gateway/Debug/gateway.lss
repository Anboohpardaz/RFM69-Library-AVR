
gateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000c46  00000cda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800104  00800104  00000cde  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d1  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000044e  00000000  00000000  000028ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000820  00000000  00000000  00002cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000050c  00000000  00000000  0000351c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000876  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001280  00000000  00000000  0000429e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000551e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__vector_6>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_12>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e4       	ldi	r30, 0x46	; 70
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a4 30       	cpi	r26, 0x04	; 4
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	a4 e0       	ldi	r26, 0x04	; 4
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a4 35       	cpi	r26, 0x54	; 84
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 d5 05 	call	0xbaa	; 0xbaa <main>
  c2:	0c 94 21 06 	jmp	0xc42	; 0xc42 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_ZL9lcd_writehh>:
          Delay_us(5);
          PrevCmdInvolvedAddressCounter=0;
        }
    #endif

    if (rs)
  ca:	66 23       	and	r22, r22
  cc:	31 f0       	breq	.+12     	; 0xda <_ZL9lcd_writehh+0x10>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
  ce:	e2 e6       	ldi	r30, 0x62	; 98
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	90 64       	ori	r25, 0x40	; 64
  d6:	90 83       	st	Z, r25
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <_ZL9lcd_writehh+0x1a>
        PrevCmdInvolvedAddressCounter=1;
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
  da:	e2 e6       	ldi	r30, 0x62	; 98
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	9f 7b       	andi	r25, 0xBF	; 191
  e2:	90 83       	st	Z, r25
        PrevCmdInvolvedAddressCounter=0;
        #endif
      }

    #if LCD_BITS==4
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
  e4:	88 23       	and	r24, r24
  e6:	34 f4       	brge	.+12     	; 0xf4 <_ZL9lcd_writehh+0x2a>
  e8:	e2 e6       	ldi	r30, 0x62	; 98
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	90 81       	ld	r25, Z
  ee:	92 60       	ori	r25, 0x02	; 2
  f0:	90 83       	st	Z, r25
  f2:	05 c0       	rjmp	.+10     	; 0xfe <_ZL9lcd_writehh+0x34>
  f4:	e2 e6       	ldi	r30, 0x62	; 98
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	9d 7f       	andi	r25, 0xFD	; 253
  fc:	90 83       	st	Z, r25
      lcd_db6_port_set(data&_BV(6));
  fe:	86 ff       	sbrs	r24, 6
 100:	06 c0       	rjmp	.+12     	; 0x10e <_ZL9lcd_writehh+0x44>
 102:	e2 e6       	ldi	r30, 0x62	; 98
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	90 81       	ld	r25, Z
 108:	94 60       	ori	r25, 0x04	; 4
 10a:	90 83       	st	Z, r25
 10c:	05 c0       	rjmp	.+10     	; 0x118 <_ZL9lcd_writehh+0x4e>
 10e:	e2 e6       	ldi	r30, 0x62	; 98
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	90 81       	ld	r25, Z
 114:	9b 7f       	andi	r25, 0xFB	; 251
 116:	90 83       	st	Z, r25
      lcd_db5_port_set(data&_BV(5));
 118:	85 ff       	sbrs	r24, 5
 11a:	06 c0       	rjmp	.+12     	; 0x128 <_ZL9lcd_writehh+0x5e>
 11c:	e2 e6       	ldi	r30, 0x62	; 98
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	90 81       	ld	r25, Z
 122:	98 60       	ori	r25, 0x08	; 8
 124:	90 83       	st	Z, r25
 126:	05 c0       	rjmp	.+10     	; 0x132 <_ZL9lcd_writehh+0x68>
 128:	e2 e6       	ldi	r30, 0x62	; 98
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	97 7f       	andi	r25, 0xF7	; 247
 130:	90 83       	st	Z, r25
      lcd_db4_port_set(data&_BV(4));
 132:	84 ff       	sbrs	r24, 4
 134:	06 c0       	rjmp	.+12     	; 0x142 <_ZL9lcd_writehh+0x78>
 136:	e2 e6       	ldi	r30, 0x62	; 98
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	90 61       	ori	r25, 0x10	; 16
 13e:	90 83       	st	Z, r25
 140:	05 c0       	rjmp	.+10     	; 0x14c <_ZL9lcd_writehh+0x82>
 142:	e2 e6       	ldi	r30, 0x62	; 98
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	90 81       	ld	r25, Z
 148:	9f 7e       	andi	r25, 0xEF	; 239
 14a:	90 83       	st	Z, r25

      Delay_ns(100);
 14c:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 14e:	e2 e6       	ldi	r30, 0x62	; 98
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	90 81       	ld	r25, Z
 154:	90 62       	ori	r25, 0x20	; 32
 156:	90 83       	st	Z, r25
      lcd_db4_port_set(data&_BV(4));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
 158:	00 c0       	rjmp	.+0      	; 0x15a <_ZL9lcd_writehh+0x90>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <_ZL9lcd_writehh+0x92>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 15c:	90 81       	ld	r25, Z
 15e:	9f 7d       	andi	r25, 0xDF	; 223
 160:	90 83       	st	Z, r25
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
 162:	83 ff       	sbrs	r24, 3
 164:	04 c0       	rjmp	.+8      	; 0x16e <_ZL9lcd_writehh+0xa4>
 166:	90 81       	ld	r25, Z
 168:	92 60       	ori	r25, 0x02	; 2
 16a:	90 83       	st	Z, r25
 16c:	05 c0       	rjmp	.+10     	; 0x178 <_ZL9lcd_writehh+0xae>
 16e:	e2 e6       	ldi	r30, 0x62	; 98
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	90 81       	ld	r25, Z
 174:	9d 7f       	andi	r25, 0xFD	; 253
 176:	90 83       	st	Z, r25
      lcd_db6_port_set(data&_BV(2));
 178:	82 ff       	sbrs	r24, 2
 17a:	06 c0       	rjmp	.+12     	; 0x188 <_ZL9lcd_writehh+0xbe>
 17c:	e2 e6       	ldi	r30, 0x62	; 98
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	90 81       	ld	r25, Z
 182:	94 60       	ori	r25, 0x04	; 4
 184:	90 83       	st	Z, r25
 186:	05 c0       	rjmp	.+10     	; 0x192 <_ZL9lcd_writehh+0xc8>
 188:	e2 e6       	ldi	r30, 0x62	; 98
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	90 81       	ld	r25, Z
 18e:	9b 7f       	andi	r25, 0xFB	; 251
 190:	90 83       	st	Z, r25
      lcd_db5_port_set(data&_BV(1));
 192:	81 ff       	sbrs	r24, 1
 194:	06 c0       	rjmp	.+12     	; 0x1a2 <_ZL9lcd_writehh+0xd8>
 196:	e2 e6       	ldi	r30, 0x62	; 98
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	90 81       	ld	r25, Z
 19c:	98 60       	ori	r25, 0x08	; 8
 19e:	90 83       	st	Z, r25
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <_ZL9lcd_writehh+0xe2>
 1a2:	e2 e6       	ldi	r30, 0x62	; 98
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	90 81       	ld	r25, Z
 1a8:	97 7f       	andi	r25, 0xF7	; 247
 1aa:	90 83       	st	Z, r25
      lcd_db4_port_set(data&_BV(0));
 1ac:	80 ff       	sbrs	r24, 0
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <_ZL9lcd_writehh+0xf2>
 1b0:	e2 e6       	ldi	r30, 0x62	; 98
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	90 81       	ld	r25, Z
 1b6:	90 61       	ori	r25, 0x10	; 16
 1b8:	90 83       	st	Z, r25
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <_ZL9lcd_writehh+0xfc>
 1bc:	e2 e6       	ldi	r30, 0x62	; 98
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	90 81       	ld	r25, Z
 1c2:	9f 7e       	andi	r25, 0xEF	; 239
 1c4:	90 83       	st	Z, r25

      Delay_ns(100);
 1c6:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 1c8:	e2 e6       	ldi	r30, 0x62	; 98
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	90 81       	ld	r25, Z
 1ce:	90 62       	ori	r25, 0x20	; 32
 1d0:	90 83       	st	Z, r25
      lcd_db4_port_set(data&_BV(0));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <_ZL9lcd_writehh+0x10a>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_ZL9lcd_writehh+0x10c>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1d6:	90 81       	ld	r25, Z
 1d8:	9f 7d       	andi	r25, 0xDF	; 223
 1da:	90 83       	st	Z, r25
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
 1dc:	90 81       	ld	r25, Z
 1de:	92 60       	ori	r25, 0x02	; 2
 1e0:	90 83       	st	Z, r25
      lcd_db6_port_high();
 1e2:	90 81       	ld	r25, Z
 1e4:	94 60       	ori	r25, 0x04	; 4
 1e6:	90 83       	st	Z, r25
      lcd_db5_port_high();
 1e8:	90 81       	ld	r25, Z
 1ea:	98 60       	ori	r25, 0x08	; 8
 1ec:	90 83       	st	Z, r25
      lcd_db4_port_high();
 1ee:	90 81       	ld	r25, Z
 1f0:	90 61       	ori	r25, 0x10	; 16
 1f2:	90 83       	st	Z, r25
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
 1f4:	61 11       	cpse	r22, r1
 1f6:	09 c0       	rjmp	.+18     	; 0x20a <_ZL9lcd_writehh+0x140>
 1f8:	84 30       	cpi	r24, 0x04	; 4
 1fa:	38 f4       	brcc	.+14     	; 0x20a <_ZL9lcd_writehh+0x140>
        Delay_us(1640);
 1fc:	8f ec       	ldi	r24, 0xCF	; 207
 1fe:	9c e0       	ldi	r25, 0x0C	; 12
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <_ZL9lcd_writehh+0x136>
 204:	00 c0       	rjmp	.+0      	; 0x206 <_ZL9lcd_writehh+0x13c>
 206:	00 00       	nop
 208:	08 95       	ret
      else Delay_us(40);
 20a:	9a e6       	ldi	r25, 0x6A	; 106
 20c:	9a 95       	dec	r25
 20e:	f1 f7       	brne	.-4      	; 0x20c <_ZL9lcd_writehh+0x142>
 210:	00 c0       	rjmp	.+0      	; 0x212 <_ZL9lcd_writehh+0x148>
 212:	08 95       	ret

00000214 <_Z8spi_initv>:
#define SS 0

void spi_init()
// Initialize pins for spi communication
{
	SPI_DDR &= ~((1<<MOSI)|(1<<MISO)|(1<<SS)|(1<<SCK));
 214:	87 b3       	in	r24, 0x17	; 23
 216:	80 7f       	andi	r24, 0xF0	; 240
 218:	87 bb       	out	0x17, r24	; 23
	// Define the following pins as output
	SPI_DDR |= ((1<<MOSI)|(1<<SS)|(1<<SCK));
 21a:	87 b3       	in	r24, 0x17	; 23
 21c:	87 60       	ori	r24, 0x07	; 7
 21e:	87 bb       	out	0x17, r24	; 23
	(0<<SPIE)|              // SPI Interupt Enable
	(0<<DORD)|              // Data Order (0:MSB first / 1:LSB first)
	(1<<MSTR)|              // Master/Slave select
	(0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate
	(0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
	(0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)
 220:	80 e5       	ldi	r24, 0x50	; 80
 222:	8d b9       	out	0x0d, r24	; 13

	SPSR = (1<<SPI2X);              // Double Clock Rate
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	8e b9       	out	0x0e, r24	; 14
 228:	08 95       	ret

0000022a <_Z14spi_fast_shifth>:
}

uint8_t spi_fast_shift (uint8_t data)
// Clocks only one byte to target device and returns the received one
{
	SPDR = data;
 22a:	8f b9       	out	0x0f, r24	; 15
	while((SPSR & (1<<SPIF))==0);
 22c:	77 9b       	sbis	0x0e, 7	; 14
 22e:	fe cf       	rjmp	.-4      	; 0x22c <_Z14spi_fast_shifth+0x2>
	return SPDR;
 230:	8f b1       	in	r24, 0x0f	; 15
 232:	08 95       	ret

00000234 <_Z11millis_initv>:
volatile unsigned long timer1_millis;

void millis_init()
{
    // CTC mode, Clock/8
    TCCR1B |= (1 << WGM12) | (1 << CS11);
 234:	8e b5       	in	r24, 0x2e	; 46
 236:	8a 60       	ori	r24, 0x0A	; 10
 238:	8e bd       	out	0x2e, r24	; 46
    
    // Load the high byte, then the low byte
    // into the output compare
    OCR1AH = (CTC_MATCH_OVERFLOW >> 8);
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	8b bd       	out	0x2b, r24	; 43
    OCR1AL = CTC_MATCH_OVERFLOW;
 23e:	88 ee       	ldi	r24, 0xE8	; 232
 240:	8a bd       	out	0x2a, r24	; 42
	sei();
 242:	78 94       	sei
	
    // Enable the compare match interrupt
    TIMSK |= (1 << OCIE1A);
 244:	87 b7       	in	r24, 0x37	; 55
 246:	80 61       	ori	r24, 0x10	; 16
 248:	87 bf       	out	0x37, r24	; 55
 24a:	08 95       	ret

0000024c <_Z6millisv>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 24c:	f8 94       	cli
{
	unsigned long millis_return;
	// ensure this cannnot be disrupted
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		millis_return = timer1_millis;
 24e:	60 91 50 01 	lds	r22, 0x0150
 252:	70 91 51 01 	lds	r23, 0x0151
 256:	80 91 52 01 	lds	r24, 0x0152
 25a:	90 91 53 01 	lds	r25, 0x0153
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 25e:	78 94       	sei
	}
	return millis_return;
}
 260:	08 95       	ret

00000262 <__vector_12>:

ISR (TIMER1_COMPA_vect)
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	af 93       	push	r26
 272:	bf 93       	push	r27
	timer1_millis++;
 274:	80 91 50 01 	lds	r24, 0x0150
 278:	90 91 51 01 	lds	r25, 0x0151
 27c:	a0 91 52 01 	lds	r26, 0x0152
 280:	b0 91 53 01 	lds	r27, 0x0153
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	a1 1d       	adc	r26, r1
 288:	b1 1d       	adc	r27, r1
 28a:	80 93 50 01 	sts	0x0150, r24
 28e:	90 93 51 01 	sts	0x0151, r25
 292:	a0 93 52 01 	sts	0x0152, r26
 296:	b0 93 53 01 	sts	0x0153, r27
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <_Z12ACKRequestedv>:
}

// check whether an ACK was requested in the last received packet (non-broadcasted packet)
uint8_t ACKRequested() 
{
	return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
 2ac:	80 91 0e 01 	lds	r24, 0x010E
 2b0:	88 23       	and	r24, r24
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <_Z12ACKRequestedv+0x16>
 2b4:	90 91 10 01 	lds	r25, 0x0110
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	9f 3f       	cpi	r25, 0xFF	; 255
 2bc:	19 f4       	brne	.+6      	; 0x2c4 <_Z12ACKRequestedv+0x18>
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 95       	ret
 2c2:	80 e0       	ldi	r24, 0x00	; 0
}
 2c4:	08 95       	ret

000002c6 <_Z15maybeInterruptsv>:
}

void maybeInterrupts()
{
	// Only reenable interrupts if we're not being called from the ISR
	if (!inISR) sei();
 2c6:	80 91 04 01 	lds	r24, 0x0104
 2ca:	81 11       	cpse	r24, r1
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <_Z15maybeInterruptsv+0xa>
 2ce:	78 94       	sei
 2d0:	08 95       	ret

000002d2 <_Z6selectv>:
}

void select()
{
	SS_PORT &= ~(1<<SS_PIN);
 2d2:	c0 98       	cbi	0x18, 0	; 24
	cli();
 2d4:	f8 94       	cli
 2d6:	08 95       	ret

000002d8 <_Z8unselectv>:
}

void unselect()
{
	SS_PORT |= 1<<SS_PIN;
 2d8:	c0 9a       	sbi	0x18, 0	; 24
	maybeInterrupts();
 2da:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z15maybeInterruptsv>
 2de:	08 95       	ret

000002e0 <_Z7readRegh>:
	}
	setMode(oldMode);
}

uint8_t readReg(uint8_t addr)
{
 2e0:	cf 93       	push	r28
 2e2:	c8 2f       	mov	r28, r24
    select();
 2e4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z6selectv>
	spi_fast_shift(addr & 0x7F);
 2e8:	8c 2f       	mov	r24, r28
 2ea:	8f 77       	andi	r24, 0x7F	; 127
 2ec:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
	uint8_t regval = spi_fast_shift(0);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
 2f6:	c8 2f       	mov	r28, r24
	unselect();
 2f8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z8unselectv>
	return regval;
}
 2fc:	8c 2f       	mov	r24, r28
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <_Z8writeReghh>:

void writeReg(uint8_t addr, uint8_t value)
{
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	d8 2f       	mov	r29, r24
 308:	c6 2f       	mov	r28, r22
	select();
 30a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z6selectv>
	spi_fast_shift(addr | 0x80);
 30e:	8d 2f       	mov	r24, r29
 310:	80 68       	ori	r24, 0x80	; 128
 312:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
	spi_fast_shift(value);
 316:	8c 2f       	mov	r24, r28
 318:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
	unselect();
 31c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z8unselectv>
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <_Z10setAddressh>:
}

//set this node's address
void setAddress(uint8_t addr)
{
	writeReg(REG_NODEADRS, addr);
 326:	68 2f       	mov	r22, r24
 328:	89 e3       	ldi	r24, 0x39	; 57
 32a:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
 32e:	08 95       	ret

00000330 <_Z10setNetworkh>:
}

//set network address
void setNetwork(uint8_t networkID)
{
	writeReg(REG_SYNCVALUE2, networkID);
 330:	68 2f       	mov	r22, r24
 332:	80 e3       	ldi	r24, 0x30	; 48
 334:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
 338:	08 95       	ret

0000033a <_Z13setPowerLevelh>:
// this function implements 2 modes as follows:
//       - for RFM69W the range is from 0-31 [-18dBm to 13dBm] (PA0 only on RFIO pin)
//       - for RFM69HW the range is from 0-31 [5dBm to 20dBm]  (PA1 & PA2 on PA_BOOST pin & high Power PA settings - see section 3.3.7 in datasheet, p22)

void setPowerLevel(uint8_t powerLevel)
{
 33a:	cf 93       	push	r28
 33c:	c8 2f       	mov	r28, r24
	uint8_t _powerLevel = powerLevel;
	if (isRFM69HW==1) _powerLevel /= 2;
 33e:	80 91 01 01 	lds	r24, 0x0101
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	09 f4       	brne	.+2      	; 0x348 <_Z13setPowerLevelh+0xe>
 346:	c6 95       	lsr	r28
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
 348:	81 e1       	ldi	r24, 0x11	; 17
 34a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 34e:	80 7e       	andi	r24, 0xE0	; 224
 350:	68 2f       	mov	r22, r24
 352:	6c 2b       	or	r22, r28
 354:	81 e1       	ldi	r24, 0x11	; 17
 356:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
}
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <_Z16setHighPowerRegsh>:
}
	
// internal function
void setHighPowerRegs(uint8_t onOff)
{
	if(onOff==1)
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	49 f4       	brne	.+18     	; 0x374 <_Z16setHighPowerRegsh+0x16>
	{
	writeReg(REG_TESTPA1, 0x5D);
 362:	6d e5       	ldi	r22, 0x5D	; 93
 364:	8a e5       	ldi	r24, 0x5A	; 90
 366:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
	writeReg(REG_TESTPA2, 0x7C);
 36a:	6c e7       	ldi	r22, 0x7C	; 124
 36c:	8c e5       	ldi	r24, 0x5C	; 92
 36e:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
 372:	08 95       	ret
	}
	else
	{
		writeReg(REG_TESTPA1, 0x55);
 374:	65 e5       	ldi	r22, 0x55	; 85
 376:	8a e5       	ldi	r24, 0x5A	; 90
 378:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
		writeReg(REG_TESTPA2, 0x70);
 37c:	60 e7       	ldi	r22, 0x70	; 112
 37e:	8c e5       	ldi	r24, 0x5C	; 92
 380:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
 384:	08 95       	ret

00000386 <_Z7setModeh>:
	else
	    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | 0x00);	
}

void setMode(uint8_t newMode)
{
 386:	cf 93       	push	r28
	if (newMode == mode)
 388:	90 91 02 01 	lds	r25, 0x0102
 38c:	98 17       	cp	r25, r24
 38e:	09 f4       	brne	.+2      	; 0x392 <_Z7setModeh+0xc>
 390:	57 c0       	rjmp	.+174    	; 0x440 <_Z7setModeh+0xba>
 392:	c8 2f       	mov	r28, r24
	return;

	switch (newMode)
 394:	82 30       	cpi	r24, 0x02	; 2
 396:	69 f1       	breq	.+90     	; 0x3f2 <_Z7setModeh+0x6c>
 398:	28 f4       	brcc	.+10     	; 0x3a4 <_Z7setModeh+0x1e>
 39a:	88 23       	and	r24, r24
 39c:	f1 f1       	breq	.+124    	; 0x41a <_Z7setModeh+0x94>
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	91 f1       	breq	.+100    	; 0x406 <_Z7setModeh+0x80>
 3a2:	4e c0       	rjmp	.+156    	; 0x440 <_Z7setModeh+0xba>
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	a1 f0       	breq	.+40     	; 0x3d0 <_Z7setModeh+0x4a>
 3a8:	84 30       	cpi	r24, 0x04	; 4
 3aa:	09 f0       	breq	.+2      	; 0x3ae <_Z7setModeh+0x28>
 3ac:	49 c0       	rjmp	.+146    	; 0x440 <_Z7setModeh+0xba>
	{
		case RF69_MODE_TX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 3b4:	83 7e       	andi	r24, 0xE3	; 227
 3b6:	68 2f       	mov	r22, r24
 3b8:	6c 60       	ori	r22, 0x0C	; 12
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
			if (isRFM69HW) setHighPowerRegs(1);
 3c0:	80 91 01 01 	lds	r24, 0x0101
 3c4:	88 23       	and	r24, r24
 3c6:	89 f1       	breq	.+98     	; 0x42a <_Z7setModeh+0xa4>
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 af 01 	call	0x35e	; 0x35e <_Z16setHighPowerRegsh>
 3ce:	2d c0       	rjmp	.+90     	; 0x42a <_Z7setModeh+0xa4>
			break;
		case RF69_MODE_RX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 3d6:	83 7e       	andi	r24, 0xE3	; 227
 3d8:	68 2f       	mov	r22, r24
 3da:	60 61       	ori	r22, 0x10	; 16
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
			if (isRFM69HW) setHighPowerRegs(0);
 3e2:	80 91 01 01 	lds	r24, 0x0101
 3e6:	88 23       	and	r24, r24
 3e8:	01 f1       	breq	.+64     	; 0x42a <_Z7setModeh+0xa4>
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 af 01 	call	0x35e	; 0x35e <_Z16setHighPowerRegsh>
 3f0:	1c c0       	rjmp	.+56     	; 0x42a <_Z7setModeh+0xa4>
			break;
		case RF69_MODE_SYNTH:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 3f8:	83 7e       	andi	r24, 0xE3	; 227
 3fa:	68 2f       	mov	r22, r24
 3fc:	68 60       	ori	r22, 0x08	; 8
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
			break;
 404:	12 c0       	rjmp	.+36     	; 0x42a <_Z7setModeh+0xa4>
		case RF69_MODE_STANDBY:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 40c:	83 7e       	andi	r24, 0xE3	; 227
 40e:	68 2f       	mov	r22, r24
 410:	64 60       	ori	r22, 0x04	; 4
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
			break;
 418:	08 c0       	rjmp	.+16     	; 0x42a <_Z7setModeh+0xa4>
		case RF69_MODE_SLEEP:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 420:	68 2f       	mov	r22, r24
 422:	63 7e       	andi	r22, 0xE3	; 227
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
		default:
		return;
	}
    // we are using packet mode, so this check is not really needed
    // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
    while (mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
 42a:	90 91 02 01 	lds	r25, 0x0102
 42e:	91 11       	cpse	r25, r1
 430:	05 c0       	rjmp	.+10     	; 0x43c <_Z7setModeh+0xb6>
 432:	87 e2       	ldi	r24, 0x27	; 39
 434:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 438:	88 23       	and	r24, r24
 43a:	bc f7       	brge	.-18     	; 0x42a <_Z7setModeh+0xa4>
    mode = newMode;
 43c:	c0 93 02 01 	sts	0x0102, r28
}
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <_Z12setHighPowerh>:
}
	
// for RFM69HW only: you must call setHighPower(1) after rfm69_init() or else transmission won't work
void setHighPower(uint8_t onOff) 
{
	isRFM69HW = onOff;
 444:	80 93 01 01 	sts	0x0101, r24
	if(isRFM69HW==0)
 448:	81 11       	cpse	r24, r1
 44a:	05 c0       	rjmp	.+10     	; 0x456 <_Z12setHighPowerh+0x12>
	    writeReg(REG_OCP, RF_OCP_OFF);
 44c:	6f e0       	ldi	r22, 0x0F	; 15
 44e:	83 e1       	ldi	r24, 0x13	; 19
 450:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
 454:	08 95       	ret
	else if(isRFM69HW==1) // turning ON
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	51 f4       	brne	.+20     	; 0x46e <_Z12setHighPowerh+0x2a>
	    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
 45a:	81 e1       	ldi	r24, 0x11	; 17
 45c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 460:	8f 71       	andi	r24, 0x1F	; 31
 462:	68 2f       	mov	r22, r24
 464:	60 66       	ori	r22, 0x60	; 96
 466:	81 e1       	ldi	r24, 0x11	; 17
 468:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
 46c:	08 95       	ret
	else
	    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | powerLevel); // enable P0 only
 46e:	60 91 00 01 	lds	r22, 0x0100
 472:	60 68       	ori	r22, 0x80	; 128
 474:	81 e1       	ldi	r24, 0x11	; 17
 476:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
 47a:	08 95       	ret

0000047c <_Z8readRSSIh>:

// get the received signal strength indicator (RSSI)
int16_t readRSSI(uint8_t forceTrigger)
{
	int16_t rssi = 0;
	if (forceTrigger==1)
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	49 f4       	brne	.+18     	; 0x492 <_Z8readRSSIh+0x16>
	{
		// RSSI trigger not needed if DAGC is in continuous mode
		writeReg(REG_RSSICONFIG, RF_RSSI_START);
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	83 e2       	ldi	r24, 0x23	; 35
 484:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
		while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // wait for RSSI_Ready
 488:	83 e2       	ldi	r24, 0x23	; 35
 48a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 48e:	81 ff       	sbrs	r24, 1
 490:	fb cf       	rjmp	.-10     	; 0x488 <_Z8readRSSIh+0xc>
	}
	rssi = -readReg(REG_RSSIVALUE);
 492:	84 e2       	ldi	r24, 0x24	; 36
 494:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	91 95       	neg	r25
 49c:	81 95       	neg	r24
 49e:	91 09       	sbc	r25, r1
	rssi >>= 1;
	return rssi;
}
 4a0:	95 95       	asr	r25
 4a2:	87 95       	ror	r24
 4a4:	08 95       	ret

000004a6 <_Z7canSendv>:
{
	writeReg(REG_SYNCVALUE2, networkID);
}

uint8_t canSend()
{
 4a6:	cf 93       	push	r28
	if (mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
 4a8:	80 91 02 01 	lds	r24, 0x0102
 4ac:	83 30       	cpi	r24, 0x03	; 3
 4ae:	79 f4       	brne	.+30     	; 0x4ce <_Z7canSendv+0x28>
 4b0:	c0 91 0f 01 	lds	r28, 0x010F
 4b4:	c1 11       	cpse	r28, r1
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <_Z7canSendv+0x2c>
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 3e 02 	call	0x47c	; 0x47c <_Z8readRSSIh>
 4be:	86 3a       	cpi	r24, 0xA6	; 166
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	44 f4       	brge	.+16     	; 0x4d4 <_Z7canSendv+0x2e>
	{
		setMode(RF69_MODE_STANDBY);
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 c3 01 	call	0x386	; 0x386 <_Z7setModeh>
		return 1;
 4ca:	c1 e0       	ldi	r28, 0x01	; 1
 4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <_Z7canSendv+0x2e>
	}
	return 0;
 4ce:	c0 e0       	ldi	r28, 0x00	; 0
 4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <_Z7canSendv+0x2e>
 4d2:	c0 e0       	ldi	r28, 0x00	; 0
}
 4d4:	8c 2f       	mov	r24, r28
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <_Z12receiveBeginv>:
	return 0;
}

// internal function
void receiveBegin() {
	DATALEN = 0;
 4da:	10 92 12 01 	sts	0x0112, r1
	SENDERID = 0;
 4de:	10 92 11 01 	sts	0x0111, r1
	TARGETID = 0;
 4e2:	10 92 10 01 	sts	0x0110, r1
	PAYLOADLEN = 0;
 4e6:	10 92 0f 01 	sts	0x010F, r1
	ACK_REQUESTED = 0;
 4ea:	10 92 0e 01 	sts	0x010E, r1
	ACK_RECEIVED = 0;
 4ee:	10 92 0d 01 	sts	0x010D, r1
	RSSI = 0;
 4f2:	10 92 0c 01 	sts	0x010C, r1
 4f6:	10 92 0b 01 	sts	0x010B, r1
	if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
 4fa:	88 e2       	ldi	r24, 0x28	; 40
 4fc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 500:	82 ff       	sbrs	r24, 2
 502:	08 c0       	rjmp	.+16     	; 0x514 <_Z12receiveBeginv+0x3a>
	writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
 504:	8d e3       	ldi	r24, 0x3D	; 61
 506:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 50a:	68 2f       	mov	r22, r24
 50c:	64 60       	ori	r22, 0x04	; 4
 50e:	8d e3       	ldi	r24, 0x3D	; 61
 510:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
 514:	60 e4       	ldi	r22, 0x40	; 64
 516:	85 e2       	ldi	r24, 0x25	; 37
 518:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
	setMode(RF69_MODE_RX);
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	0e 94 c3 01 	call	0x386	; 0x386 <_Z7setModeh>
 522:	08 95       	ret

00000524 <_Z11receiveDonev>:
	return 0;
}

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
uint8_t receiveDone() {
	cli();
 524:	f8 94       	cli
	if (mode == RF69_MODE_RX && PAYLOADLEN > 0)
 526:	80 91 02 01 	lds	r24, 0x0102
 52a:	83 30       	cpi	r24, 0x03	; 3
 52c:	61 f4       	brne	.+24     	; 0x546 <_Z11receiveDonev+0x22>
 52e:	80 91 0f 01 	lds	r24, 0x010F
 532:	81 11       	cpse	r24, r1
 534:	0d c0       	rjmp	.+26     	; 0x550 <_Z11receiveDonev+0x2c>
 536:	07 c0       	rjmp	.+14     	; 0x546 <_Z11receiveDonev+0x22>
		setMode(RF69_MODE_STANDBY); // enables interrupts
		return 1;
	}
	else if (mode == RF69_MODE_RX) // already in RX no payload yet
	{
		sei(); // explicitly re-enable interrupts
 538:	78 94       	sei
		return 0;
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	08 95       	ret
	}
	receiveBegin();
 53e:	0e 94 6d 02 	call	0x4da	; 0x4da <_Z12receiveBeginv>
	return 0;
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	08 95       	ret
	if (mode == RF69_MODE_RX && PAYLOADLEN > 0)
	{
		setMode(RF69_MODE_STANDBY); // enables interrupts
		return 1;
	}
	else if (mode == RF69_MODE_RX) // already in RX no payload yet
 546:	80 91 02 01 	lds	r24, 0x0102
 54a:	83 30       	cpi	r24, 0x03	; 3
 54c:	c1 f7       	brne	.-16     	; 0x53e <_Z11receiveDonev+0x1a>
 54e:	f4 cf       	rjmp	.-24     	; 0x538 <_Z11receiveDonev+0x14>
// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
uint8_t receiveDone() {
	cli();
	if (mode == RF69_MODE_RX && PAYLOADLEN > 0)
	{
		setMode(RF69_MODE_STANDBY); // enables interrupts
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 c3 01 	call	0x386	; 0x386 <_Z7setModeh>
		return 1;
 556:	81 e0       	ldi	r24, 0x01	; 1
		sei(); // explicitly re-enable interrupts
		return 0;
	}
	receiveBegin();
	return 0;
}
 558:	08 95       	ret

0000055a <_Z7encryptPKc>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: encrypt(null) or encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void encrypt(const char* key) 
{
 55a:	0f 93       	push	r16
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	8c 01       	movw	r16, r24
	setMode(RF69_MODE_STANDBY);
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	0e 94 c3 01 	call	0x386	; 0x386 <_Z7setModeh>
	if (key != 0)
 56a:	01 15       	cp	r16, r1
 56c:	11 05       	cpc	r17, r1
 56e:	89 f0       	breq	.+34     	; 0x592 <_Z7encryptPKc+0x38>
	{
		select();
 570:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z6selectv>
		spi_fast_shift(REG_AESKEY1 | 0x80);
 574:	8e eb       	ldi	r24, 0xBE	; 190
 576:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
 57a:	e8 01       	movw	r28, r16
 57c:	00 5f       	subi	r16, 0xF0	; 240
 57e:	1f 4f       	sbci	r17, 0xFF	; 255
		for (uint8_t i = 0; i < 16; i++)
		    spi_fast_shift(key[i]);
 580:	89 91       	ld	r24, Y+
 582:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
	setMode(RF69_MODE_STANDBY);
	if (key != 0)
	{
		select();
		spi_fast_shift(REG_AESKEY1 | 0x80);
		for (uint8_t i = 0; i < 16; i++)
 586:	c0 17       	cp	r28, r16
 588:	d1 07       	cpc	r29, r17
 58a:	d1 f7       	brne	.-12     	; 0x580 <_Z7encryptPKc+0x26>
		    spi_fast_shift(key[i]);
		unselect();
 58c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z8unselectv>
 590:	08 c0       	rjmp	.+16     	; 0x5a2 <_Z7encryptPKc+0x48>
	}
	else
	    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | 0x00);	
 592:	8d e3       	ldi	r24, 0x3D	; 61
 594:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 598:	68 2f       	mov	r22, r24
 59a:	6e 7f       	andi	r22, 0xFE	; 254
 59c:	8d e3       	ldi	r24, 0x3D	; 61
 59e:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	08 95       	ret

000005ac <_Z10rfm69_inithh>:
void maybeInterrupts();
void select();
void unselect();

void rfm69_init(uint8_t nodeID, uint8_t networkID) //frequency is 433MHz by default. Will work on it later. Have to change 0x07, 0x08, 0x09
{
 5ac:	ff 92       	push	r15
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
 5ba:	ae 97       	sbiw	r28, 0x2e	; 46
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	de bf       	out	0x3e, r29	; 62
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	cd bf       	out	0x3d, r28	; 61
 5c6:	f8 2e       	mov	r15, r24
 5c8:	06 2f       	mov	r16, r22
		/* 0x3C */ { REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTART_FIFONOTEMPTY | RF_FIFOTHRESH_VALUE }, // TX on FIFO not empty
		/* 0x3D */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, // RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
		//for BR-19200: /* 0x3D */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, // RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
		/* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode for Fading Margin Improvement, recommended default for AfcLowBetaOn=0
		{255, 0}
	};
 5ca:	8e e2       	ldi	r24, 0x2E	; 46
 5cc:	fe 01       	movw	r30, r28
 5ce:	31 96       	adiw	r30, 0x01	; 1
 5d0:	df 01       	movw	r26, r30
 5d2:	98 2f       	mov	r25, r24
 5d4:	1d 92       	st	X+, r1
 5d6:	9a 95       	dec	r25
 5d8:	e9 f7       	brne	.-6      	; 0x5d4 <_Z10rfm69_inithh+0x28>
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	99 83       	std	Y+1, r25	; 0x01
 5de:	24 e0       	ldi	r18, 0x04	; 4
 5e0:	2a 83       	std	Y+2, r18	; 0x02
 5e2:	92 e0       	ldi	r25, 0x02	; 2
 5e4:	9b 83       	std	Y+3, r25	; 0x03
 5e6:	93 e0       	ldi	r25, 0x03	; 3
 5e8:	9d 83       	std	Y+5, r25	; 0x05
 5ea:	3d e0       	ldi	r19, 0x0D	; 13
 5ec:	3e 83       	std	Y+6, r19	; 0x06
 5ee:	2f 83       	std	Y+7, r18	; 0x07
 5f0:	25 e0       	ldi	r18, 0x05	; 5
 5f2:	28 87       	std	Y+8, r18	; 0x08
 5f4:	29 87       	std	Y+9, r18	; 0x09
 5f6:	9a 87       	std	Y+10, r25	; 0x0a
 5f8:	96 e0       	ldi	r25, 0x06	; 6
 5fa:	9b 87       	std	Y+11, r25	; 0x0b
 5fc:	93 e3       	ldi	r25, 0x33	; 51
 5fe:	9c 87       	std	Y+12, r25	; 0x0c
 600:	27 e0       	ldi	r18, 0x07	; 7
 602:	2d 87       	std	Y+13, r18	; 0x0d
 604:	9c e6       	ldi	r25, 0x6C	; 108
 606:	9e 87       	std	Y+14, r25	; 0x0e
 608:	98 e0       	ldi	r25, 0x08	; 8
 60a:	9f 87       	std	Y+15, r25	; 0x0f
 60c:	30 e4       	ldi	r19, 0x40	; 64
 60e:	38 8b       	std	Y+16, r19	; 0x10
 610:	99 e0       	ldi	r25, 0x09	; 9
 612:	99 8b       	std	Y+17, r25	; 0x11
 614:	99 e1       	ldi	r25, 0x19	; 25
 616:	9b 8b       	std	Y+19, r25	; 0x13
 618:	92 e4       	ldi	r25, 0x42	; 66
 61a:	9c 8b       	std	Y+20, r25	; 0x14
 61c:	45 e2       	ldi	r20, 0x25	; 37
 61e:	4d 8b       	std	Y+21, r20	; 0x15
 620:	3e 8b       	std	Y+22, r19	; 0x16
 622:	36 e2       	ldi	r19, 0x26	; 38
 624:	3f 8b       	std	Y+23, r19	; 0x17
 626:	28 8f       	std	Y+24, r18	; 0x18
 628:	28 e2       	ldi	r18, 0x28	; 40
 62a:	29 8f       	std	Y+25, r18	; 0x19
 62c:	20 e1       	ldi	r18, 0x10	; 16
 62e:	2a 8f       	std	Y+26, r18	; 0x1a
 630:	29 e2       	ldi	r18, 0x29	; 41
 632:	2b 8f       	std	Y+27, r18	; 0x1b
 634:	2c ed       	ldi	r18, 0xDC	; 220
 636:	2c 8f       	std	Y+28, r18	; 0x1c
 638:	8d 8f       	std	Y+29, r24	; 0x1d
 63a:	88 e8       	ldi	r24, 0x88	; 136
 63c:	8e 8f       	std	Y+30, r24	; 0x1e
 63e:	8f e2       	ldi	r24, 0x2F	; 47
 640:	8f 8f       	std	Y+31, r24	; 0x1f
 642:	8d e2       	ldi	r24, 0x2D	; 45
 644:	88 a3       	std	Y+32, r24	; 0x20
 646:	80 e3       	ldi	r24, 0x30	; 48
 648:	89 a3       	std	Y+33, r24	; 0x21
 64a:	27 e3       	ldi	r18, 0x37	; 55
 64c:	2b a3       	std	Y+35, r18	; 0x23
 64e:	20 e9       	ldi	r18, 0x90	; 144
 650:	2c a3       	std	Y+36, r18	; 0x24
 652:	28 e3       	ldi	r18, 0x38	; 56
 654:	2d a3       	std	Y+37, r18	; 0x25
 656:	9e a3       	std	Y+38, r25	; 0x26
 658:	9c e3       	ldi	r25, 0x3C	; 60
 65a:	9f a3       	std	Y+39, r25	; 0x27
 65c:	9f e8       	ldi	r25, 0x8F	; 143
 65e:	98 a7       	std	Y+40, r25	; 0x28
 660:	9d e3       	ldi	r25, 0x3D	; 61
 662:	99 a7       	std	Y+41, r25	; 0x29
 664:	92 e1       	ldi	r25, 0x12	; 18
 666:	9a a7       	std	Y+42, r25	; 0x2a
 668:	9f e6       	ldi	r25, 0x6F	; 111
 66a:	9b a7       	std	Y+43, r25	; 0x2b
 66c:	8c a7       	std	Y+44, r24	; 0x2c
 66e:	8f ef       	ldi	r24, 0xFF	; 255
 670:	8d a7       	std	Y+45, r24	; 0x2d
 672:	6a a3       	std	Y+34, r22	; 0x22
    
	spi_init(); // spi init
 674:	0e 94 0a 01 	call	0x214	; 0x214 <_Z8spi_initv>
	DDRC |= 1<<PC6; // temporary for testing. LED output
 678:	a6 9a       	sbi	0x14, 6	; 20
	SS_DDR |= 1<<SS_PIN; // setting SS as output
 67a:	b8 9a       	sbi	0x17, 0	; 23
	SS_PORT |= 1<<SS_PIN; // setting slave select high
 67c:	c0 9a       	sbi	0x18, 0	; 24
	INT_DDR &= ~(1<<INT_PIN); // setting interrupt pin input. no problem if not given
 67e:	15 98       	cbi	0x02, 5	; 2
	INT_PORT &= ~(1<<INT_PIN); // setting pull down. because rising will cause interrupt. external pull down is needed.
 680:	1d 98       	cbi	0x03, 5	; 3
	
	while (readReg(REG_SYNCVALUE1) != 0xaa)
 682:	04 c0       	rjmp	.+8      	; 0x68c <_Z10rfm69_inithh+0xe0>
	{
		writeReg(REG_SYNCVALUE1, 0xaa);
 684:	6a ea       	ldi	r22, 0xAA	; 170
 686:	8f e2       	ldi	r24, 0x2F	; 47
 688:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
	SS_DDR |= 1<<SS_PIN; // setting SS as output
	SS_PORT |= 1<<SS_PIN; // setting slave select high
	INT_DDR &= ~(1<<INT_PIN); // setting interrupt pin input. no problem if not given
	INT_PORT &= ~(1<<INT_PIN); // setting pull down. because rising will cause interrupt. external pull down is needed.
	
	while (readReg(REG_SYNCVALUE1) != 0xaa)
 68c:	8f e2       	ldi	r24, 0x2F	; 47
 68e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 692:	8a 3a       	cpi	r24, 0xAA	; 170
 694:	b9 f7       	brne	.-18     	; 0x684 <_Z10rfm69_inithh+0xd8>
 696:	04 c0       	rjmp	.+8      	; 0x6a0 <_Z10rfm69_inithh+0xf4>
		writeReg(REG_SYNCVALUE1, 0xaa);
	}

	while (readReg(REG_SYNCVALUE1) != 0x55)
	{
		writeReg(REG_SYNCVALUE1, 0x55);
 698:	65 e5       	ldi	r22, 0x55	; 85
 69a:	8f e2       	ldi	r24, 0x2F	; 47
 69c:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
	while (readReg(REG_SYNCVALUE1) != 0xaa)
	{
		writeReg(REG_SYNCVALUE1, 0xaa);
	}

	while (readReg(REG_SYNCVALUE1) != 0x55)
 6a0:	8f e2       	ldi	r24, 0x2F	; 47
 6a2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 6a6:	85 35       	cpi	r24, 0x55	; 85
 6a8:	b9 f7       	brne	.-18     	; 0x698 <_Z10rfm69_inithh+0xec>
	{
		writeReg(REG_SYNCVALUE1, 0x55);
	}

	for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
 6aa:	89 81       	ldd	r24, Y+1	; 0x01
 6ac:	8f 3f       	cpi	r24, 0xFF	; 255
 6ae:	e9 f0       	breq	.+58     	; 0x6ea <_Z10rfm69_inithh+0x13e>
 6b0:	20 e0       	ldi	r18, 0x00	; 0
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	10 e0       	ldi	r17, 0x00	; 0
	    writeReg(CONFIG[i][0], CONFIG[i][1]);
 6b6:	22 0f       	add	r18, r18
 6b8:	33 1f       	adc	r19, r19
 6ba:	e1 e0       	ldi	r30, 0x01	; 1
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	ec 0f       	add	r30, r28
 6c0:	fd 1f       	adc	r31, r29
 6c2:	e2 0f       	add	r30, r18
 6c4:	f3 1f       	adc	r31, r19
 6c6:	61 81       	ldd	r22, Z+1	; 0x01
 6c8:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
	while (readReg(REG_SYNCVALUE1) != 0x55)
	{
		writeReg(REG_SYNCVALUE1, 0x55);
	}

	for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
 6cc:	1f 5f       	subi	r17, 0xFF	; 255
 6ce:	21 2f       	mov	r18, r17
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	f9 01       	movw	r30, r18
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	a1 e0       	ldi	r26, 0x01	; 1
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	ac 0f       	add	r26, r28
 6de:	bd 1f       	adc	r27, r29
 6e0:	ea 0f       	add	r30, r26
 6e2:	fb 1f       	adc	r31, r27
 6e4:	80 81       	ld	r24, Z
 6e6:	8f 3f       	cpi	r24, 0xFF	; 255
 6e8:	31 f7       	brne	.-52     	; 0x6b6 <_Z10rfm69_inithh+0x10a>
	    writeReg(CONFIG[i][0], CONFIG[i][1]);

	// Encryption is persistent between resets and can trip you up during debugging.
	// Disable it during initialization so we always start from a known state.
	encrypt(0);
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z7encryptPKc>

	setHighPower(isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
 6f2:	80 91 01 01 	lds	r24, 0x0101
 6f6:	0e 94 22 02 	call	0x444	; 0x444 <_Z12setHighPowerh>
	setMode(RF69_MODE_STANDBY);
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	0e 94 c3 01 	call	0x386	; 0x386 <_Z7setModeh>
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00);
 700:	87 e2       	ldi	r24, 0x27	; 39
 702:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 706:	88 23       	and	r24, r24
 708:	dc f7       	brge	.-10     	; 0x700 <_Z10rfm69_inithh+0x154>
	
	EICRB |= (1<<ISC51)|(1<<ISC50); // setting INT5 rising. details datasheet p91. must change with interrupt pin.
 70a:	8a b7       	in	r24, 0x3a	; 58
 70c:	8c 60       	ori	r24, 0x0C	; 12
 70e:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= 1<<INT5; // enable INT5
 710:	99 b7       	in	r25, 0x39	; 57
 712:	90 62       	ori	r25, 0x20	; 32
 714:	99 bf       	out	0x39, r25	; 57
    inISR = 0;
 716:	10 92 04 01 	sts	0x0104, r1
	//sei(); //not needed because in millis_init() sei declared :)
	millis_init(); // to get miliseconds
 71a:	0e 94 1a 01 	call	0x234	; 0x234 <_Z11millis_initv>

	address = nodeID;
 71e:	f0 92 0a 01 	sts	0x010A, r15
	setAddress(address); // setting this node id
 722:	8f 2d       	mov	r24, r15
 724:	0e 94 93 01 	call	0x326	; 0x326 <_Z10setAddressh>
	setNetwork(networkID);
 728:	80 2f       	mov	r24, r16
 72a:	0e 94 98 01 	call	0x330	; 0x330 <_Z10setNetworkh>
}
 72e:	ae 96       	adiw	r28, 0x2e	; 46
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	f8 94       	cli
 734:	de bf       	out	0x3e, r29	; 62
 736:	0f be       	out	0x3f, r0	; 63
 738:	cd bf       	out	0x3d, r28	; 61
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	1f 91       	pop	r17
 740:	0f 91       	pop	r16
 742:	ff 90       	pop	r15
 744:	08 95       	ret

00000746 <_Z9sendFramehPKvhhh>:
	return rssi;
}

// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, uint8_t requestACK, uint8_t sendACK)
{
 746:	ef 92       	push	r14
 748:	ff 92       	push	r15
 74a:	0f 93       	push	r16
 74c:	1f 93       	push	r17
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	c8 2f       	mov	r28, r24
 754:	7b 01       	movw	r14, r22
 756:	14 2f       	mov	r17, r20
 758:	d2 2f       	mov	r29, r18
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	0e 94 c3 01 	call	0x386	; 0x386 <_Z7setModeh>
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
 760:	87 e2       	ldi	r24, 0x27	; 39
 762:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 766:	88 23       	and	r24, r24
 768:	dc f7       	brge	.-10     	; 0x760 <_Z9sendFramehPKvhhh+0x1a>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	85 e2       	ldi	r24, 0x25	; 37
 76e:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
 772:	1e 33       	cpi	r17, 0x3E	; 62
 774:	08 f0       	brcs	.+2      	; 0x778 <_Z9sendFramehPKvhhh+0x32>
 776:	1d e3       	ldi	r17, 0x3D	; 61
	if (bufferSize > RF69_MAX_DATA_LEN)
	    bufferSize = RF69_MAX_DATA_LEN;

	// control byte
	uint8_t CTLbyte = 0x00;
	if (sendACK==1)
 778:	01 30       	cpi	r16, 0x01	; 1
 77a:	21 f0       	breq	.+8      	; 0x784 <_Z9sendFramehPKvhhh+0x3e>
	    CTLbyte = RFM69_CTL_SENDACK;
	else if (requestACK==1)
 77c:	d1 30       	cpi	r29, 0x01	; 1
 77e:	21 f4       	brne	.+8      	; 0x788 <_Z9sendFramehPKvhhh+0x42>
	    CTLbyte = RFM69_CTL_REQACK;
 780:	d0 e4       	ldi	r29, 0x40	; 64
 782:	03 c0       	rjmp	.+6      	; 0x78a <_Z9sendFramehPKvhhh+0x44>
	    bufferSize = RF69_MAX_DATA_LEN;

	// control byte
	uint8_t CTLbyte = 0x00;
	if (sendACK==1)
	    CTLbyte = RFM69_CTL_SENDACK;
 784:	d0 e8       	ldi	r29, 0x80	; 128
 786:	01 c0       	rjmp	.+2      	; 0x78a <_Z9sendFramehPKvhhh+0x44>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
	if (bufferSize > RF69_MAX_DATA_LEN)
	    bufferSize = RF69_MAX_DATA_LEN;

	// control byte
	uint8_t CTLbyte = 0x00;
 788:	d0 e0       	ldi	r29, 0x00	; 0
	    CTLbyte = RFM69_CTL_SENDACK;
	else if (requestACK==1)
	    CTLbyte = RFM69_CTL_REQACK;

	// write to FIFO
	select(); //enable data transfer
 78a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z6selectv>
	spi_fast_shift(REG_FIFO | 0x80);
 78e:	80 e8       	ldi	r24, 0x80	; 128
 790:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
	spi_fast_shift(bufferSize + 3);
 794:	83 e0       	ldi	r24, 0x03	; 3
 796:	81 0f       	add	r24, r17
 798:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
	spi_fast_shift(toAddress);
 79c:	8c 2f       	mov	r24, r28
 79e:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
	spi_fast_shift(address);
 7a2:	80 91 0a 01 	lds	r24, 0x010A
 7a6:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
	spi_fast_shift(CTLbyte);
 7aa:	8d 2f       	mov	r24, r29
 7ac:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>

	for (uint8_t i = 0; i < bufferSize; i++)
 7b0:	11 23       	and	r17, r17
 7b2:	71 f0       	breq	.+28     	; 0x7d0 <_Z9sendFramehPKvhhh+0x8a>
 7b4:	e7 01       	movw	r28, r14
 7b6:	11 50       	subi	r17, 0x01	; 1
 7b8:	01 2f       	mov	r16, r17
 7ba:	10 e0       	ldi	r17, 0x00	; 0
 7bc:	0f 5f       	subi	r16, 0xFF	; 255
 7be:	1f 4f       	sbci	r17, 0xFF	; 255
 7c0:	0e 0d       	add	r16, r14
 7c2:	1f 1d       	adc	r17, r15
	    spi_fast_shift(((uint8_t*) buffer)[i]);
 7c4:	89 91       	ld	r24, Y+
 7c6:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
	spi_fast_shift(bufferSize + 3);
	spi_fast_shift(toAddress);
	spi_fast_shift(address);
	spi_fast_shift(CTLbyte);

	for (uint8_t i = 0; i < bufferSize; i++)
 7ca:	c0 17       	cp	r28, r16
 7cc:	d1 07       	cpc	r29, r17
 7ce:	d1 f7       	brne	.-12     	; 0x7c4 <_Z9sendFramehPKvhhh+0x7e>
	    spi_fast_shift(((uint8_t*) buffer)[i]);
	
    unselect();
 7d0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z8unselectv>

	// no need to wait for transmit mode to be ready since its handled by the radio
	setMode(RF69_MODE_TX);
 7d4:	84 e0       	ldi	r24, 0x04	; 4
 7d6:	0e 94 c3 01 	call	0x386	; 0x386 <_Z7setModeh>
	millis_current = millis();
 7da:	0e 94 26 01 	call	0x24c	; 0x24c <_Z6millisv>
 7de:	60 93 05 01 	sts	0x0105, r22
 7e2:	70 93 06 01 	sts	0x0106, r23
 7e6:	80 93 07 01 	sts	0x0107, r24
 7ea:	90 93 08 01 	sts	0x0108, r25
	//_delay_ms(500);
	// wait for DIO to high
	// for PINE5
	//PORTC |= 1<<PC6;
	while (bit_is_clear(PINE, 5) && millis() - millis_current < RF69_TX_LIMIT_MS); // must change with interrupt pin change
 7ee:	0d 99       	sbic	0x01, 5	; 1
 7f0:	15 c0       	rjmp	.+42     	; 0x81c <_Z9sendFramehPKvhhh+0xd6>
 7f2:	0e 94 26 01 	call	0x24c	; 0x24c <_Z6millisv>
 7f6:	00 91 05 01 	lds	r16, 0x0105
 7fa:	10 91 06 01 	lds	r17, 0x0106
 7fe:	20 91 07 01 	lds	r18, 0x0107
 802:	30 91 08 01 	lds	r19, 0x0108
 806:	dc 01       	movw	r26, r24
 808:	cb 01       	movw	r24, r22
 80a:	80 1b       	sub	r24, r16
 80c:	91 0b       	sbc	r25, r17
 80e:	a2 0b       	sbc	r26, r18
 810:	b3 0b       	sbc	r27, r19
 812:	88 3e       	cpi	r24, 0xE8	; 232
 814:	93 40       	sbci	r25, 0x03	; 3
 816:	a1 05       	cpc	r26, r1
 818:	b1 05       	cpc	r27, r1
 81a:	48 f3       	brcs	.-46     	; 0x7ee <_Z9sendFramehPKvhhh+0xa8>
	//PORTC &= ~(1<<PC6); //temporary for testing
	setMode(RF69_MODE_STANDBY);
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	0e 94 c3 01 	call	0x386	; 0x386 <_Z7setModeh>
}
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	1f 91       	pop	r17
 828:	0f 91       	pop	r16
 82a:	ff 90       	pop	r15
 82c:	ef 90       	pop	r14
 82e:	08 95       	ret

00000830 <_Z7sendACKPKvh>:
	return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
}

// should be called immediately after reception in case sender wants ACK
void sendACK(const void* buffer, uint8_t bufferSize)
{
 830:	8f 92       	push	r8
 832:	9f 92       	push	r9
 834:	af 92       	push	r10
 836:	bf 92       	push	r11
 838:	df 92       	push	r13
 83a:	ef 92       	push	r14
 83c:	ff 92       	push	r15
 83e:	0f 93       	push	r16
 840:	1f 93       	push	r17
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	7c 01       	movw	r14, r24
 848:	d6 2e       	mov	r13, r22
	ACK_REQUESTED = 0;   // TWS added to make sure we don't end up in a timing race and infinite loop sending Acks
 84a:	10 92 0e 01 	sts	0x010E, r1
	uint8_t sender = SENDERID;
 84e:	10 91 11 01 	lds	r17, 0x0111
	int16_t _RSSI = RSSI; // save payload received RSSI value
 852:	c0 91 0b 01 	lds	r28, 0x010B
 856:	d0 91 0c 01 	lds	r29, 0x010C
	writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
 85a:	8d e3       	ldi	r24, 0x3D	; 61
 85c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 860:	68 2f       	mov	r22, r24
 862:	64 60       	ori	r22, 0x04	; 4
 864:	8d e3       	ldi	r24, 0x3D	; 61
 866:	0e 94 81 01 	call	0x302	; 0x302 <_Z8writeReghh>
	millis_current = millis();
 86a:	0e 94 26 01 	call	0x24c	; 0x24c <_Z6millisv>
 86e:	60 93 05 01 	sts	0x0105, r22
 872:	70 93 06 01 	sts	0x0106, r23
 876:	80 93 07 01 	sts	0x0107, r24
 87a:	90 93 08 01 	sts	0x0108, r25
	while (!canSend() && millis() - millis_current < RF69_CSMA_LIMIT_MS) receiveDone();
 87e:	02 c0       	rjmp	.+4      	; 0x884 <_Z7sendACKPKvh+0x54>
 880:	0e 94 92 02 	call	0x524	; 0x524 <_Z11receiveDonev>
 884:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z7canSendv>
 888:	81 11       	cpse	r24, r1
 88a:	15 c0       	rjmp	.+42     	; 0x8b6 <_Z7sendACKPKvh+0x86>
 88c:	0e 94 26 01 	call	0x24c	; 0x24c <_Z6millisv>
 890:	80 90 05 01 	lds	r8, 0x0105
 894:	90 90 06 01 	lds	r9, 0x0106
 898:	a0 90 07 01 	lds	r10, 0x0107
 89c:	b0 90 08 01 	lds	r11, 0x0108
 8a0:	dc 01       	movw	r26, r24
 8a2:	cb 01       	movw	r24, r22
 8a4:	88 19       	sub	r24, r8
 8a6:	99 09       	sbc	r25, r9
 8a8:	aa 09       	sbc	r26, r10
 8aa:	bb 09       	sbc	r27, r11
 8ac:	88 3e       	cpi	r24, 0xE8	; 232
 8ae:	93 40       	sbci	r25, 0x03	; 3
 8b0:	a1 05       	cpc	r26, r1
 8b2:	b1 05       	cpc	r27, r1
 8b4:	28 f3       	brcs	.-54     	; 0x880 <_Z7sendACKPKvh+0x50>
	SENDERID = sender;    // TWS: Restore SenderID after it gets wiped out by receiveDone() n.b. actually now there is no receiveDone() :D
 8b6:	10 93 11 01 	sts	0x0111, r17
	sendFrame(sender, buffer, bufferSize, 0, 1);
 8ba:	01 e0       	ldi	r16, 0x01	; 1
 8bc:	20 e0       	ldi	r18, 0x00	; 0
 8be:	4d 2d       	mov	r20, r13
 8c0:	b7 01       	movw	r22, r14
 8c2:	81 2f       	mov	r24, r17
 8c4:	0e 94 a3 03 	call	0x746	; 0x746 <_Z9sendFramehPKvhhh>
	RSSI = _RSSI; // restore payload RSSI
 8c8:	d0 93 0c 01 	sts	0x010C, r29
 8cc:	c0 93 0b 01 	sts	0x010B, r28
}
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	1f 91       	pop	r17
 8d6:	0f 91       	pop	r16
 8d8:	ff 90       	pop	r15
 8da:	ef 90       	pop	r14
 8dc:	df 90       	pop	r13
 8de:	bf 90       	pop	r11
 8e0:	af 90       	pop	r10
 8e2:	9f 90       	pop	r9
 8e4:	8f 90       	pop	r8
 8e6:	08 95       	ret

000008e8 <__vector_6>:
{
	SS_PORT |= 1<<SS_PIN;
	maybeInterrupts();
}

ISR(INT5_vect) {
 8e8:	1f 92       	push	r1
 8ea:	0f 92       	push	r0
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	0f 92       	push	r0
 8f0:	11 24       	eor	r1, r1
 8f2:	0f 93       	push	r16
 8f4:	1f 93       	push	r17
 8f6:	2f 93       	push	r18
 8f8:	3f 93       	push	r19
 8fa:	4f 93       	push	r20
 8fc:	5f 93       	push	r21
 8fe:	6f 93       	push	r22
 900:	7f 93       	push	r23
 902:	8f 93       	push	r24
 904:	9f 93       	push	r25
 906:	af 93       	push	r26
 908:	bf 93       	push	r27
 90a:	cf 93       	push	r28
 90c:	ef 93       	push	r30
 90e:	ff 93       	push	r31
	inISR = 1;
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	80 93 04 01 	sts	0x0104, r24
	if (mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
 916:	80 91 02 01 	lds	r24, 0x0102
 91a:	83 30       	cpi	r24, 0x03	; 3
 91c:	09 f0       	breq	.+2      	; 0x920 <__vector_6+0x38>
 91e:	75 c0       	rjmp	.+234    	; 0xa0a <__vector_6+0x122>
 920:	88 e2       	ldi	r24, 0x28	; 40
 922:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z7readRegh>
 926:	82 ff       	sbrs	r24, 2
 928:	70 c0       	rjmp	.+224    	; 0xa0a <__vector_6+0x122>
	{
		PORTC |= 1<<PC6;
 92a:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 92c:	8f e1       	ldi	r24, 0x1F	; 31
 92e:	9e e4       	ldi	r25, 0x4E	; 78
 930:	01 97       	sbiw	r24, 0x01	; 1
 932:	f1 f7       	brne	.-4      	; 0x930 <__vector_6+0x48>
 934:	00 c0       	rjmp	.+0      	; 0x936 <__vector_6+0x4e>
 936:	00 00       	nop
		_delay_ms(10);
		PORTC &= ~(1<<PC6);
 938:	ae 98       	cbi	0x15, 6	; 21

		setMode(RF69_MODE_STANDBY);
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	0e 94 c3 01 	call	0x386	; 0x386 <_Z7setModeh>
		select();
 940:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z6selectv>
		spi_fast_shift(REG_FIFO & 0x7F);
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
		PAYLOADLEN = spi_fast_shift(0);
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
 950:	80 93 0f 01 	sts	0x010F, r24
		if(PAYLOADLEN>66) PAYLOADLEN=66;
 954:	80 91 0f 01 	lds	r24, 0x010F
 958:	83 34       	cpi	r24, 0x43	; 67
 95a:	18 f0       	brcs	.+6      	; 0x962 <__vector_6+0x7a>
 95c:	82 e4       	ldi	r24, 0x42	; 66
 95e:	80 93 0f 01 	sts	0x010F, r24
		TARGETID = spi_fast_shift(0);
 962:	80 e0       	ldi	r24, 0x00	; 0
 964:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
 968:	80 93 10 01 	sts	0x0110, r24
		if(!(promiscuousMode || TARGETID == address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
		|| PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
 96c:	80 91 09 01 	lds	r24, 0x0109
 970:	81 11       	cpse	r24, r1
 972:	0a c0       	rjmp	.+20     	; 0x988 <__vector_6+0xa0>
		select();
		spi_fast_shift(REG_FIFO & 0x7F);
		PAYLOADLEN = spi_fast_shift(0);
		if(PAYLOADLEN>66) PAYLOADLEN=66;
		TARGETID = spi_fast_shift(0);
		if(!(promiscuousMode || TARGETID == address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
 974:	90 91 10 01 	lds	r25, 0x0110
 978:	80 91 0a 01 	lds	r24, 0x010A
 97c:	98 17       	cp	r25, r24
 97e:	21 f0       	breq	.+8      	; 0x988 <__vector_6+0xa0>
 980:	80 91 10 01 	lds	r24, 0x0110
 984:	8f 3f       	cpi	r24, 0xFF	; 255
 986:	21 f4       	brne	.+8      	; 0x990 <__vector_6+0xa8>
		|| PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
 988:	80 91 0f 01 	lds	r24, 0x010F
		select();
		spi_fast_shift(REG_FIFO & 0x7F);
		PAYLOADLEN = spi_fast_shift(0);
		if(PAYLOADLEN>66) PAYLOADLEN=66;
		TARGETID = spi_fast_shift(0);
		if(!(promiscuousMode || TARGETID == address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
 98c:	83 30       	cpi	r24, 0x03	; 3
 98e:	38 f4       	brcc	.+14     	; 0x99e <__vector_6+0xb6>
		|| PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
		{
			PAYLOADLEN = 0;
 990:	10 92 0f 01 	sts	0x010F, r1
			unselect();
 994:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z8unselectv>
			receiveBegin();
 998:	0e 94 6d 02 	call	0x4da	; 0x4da <_Z12receiveBeginv>
			return;
 99c:	3f c0       	rjmp	.+126    	; 0xa1c <__vector_6+0x134>
		}

		DATALEN = PAYLOADLEN - 3;
 99e:	80 91 0f 01 	lds	r24, 0x010F
 9a2:	83 50       	subi	r24, 0x03	; 3
 9a4:	80 93 12 01 	sts	0x0112, r24
		SENDERID = spi_fast_shift(0);
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
 9ae:	80 93 11 01 	sts	0x0111, r24
		uint8_t CTLbyte = spi_fast_shift(0);
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>

		ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
 9b8:	98 2f       	mov	r25, r24
 9ba:	90 78       	andi	r25, 0x80	; 128
 9bc:	90 93 0d 01 	sts	0x010D, r25
		ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
 9c0:	80 74       	andi	r24, 0x40	; 64
 9c2:	80 93 0e 01 	sts	0x010E, r24
		
		//interruptHook(CTLbyte);     // TWS: hook to derived class interrupt function

		for (uint8_t i = 0; i < DATALEN; i++)
 9c6:	80 91 12 01 	lds	r24, 0x0112
 9ca:	88 23       	and	r24, r24
 9cc:	79 f0       	breq	.+30     	; 0x9ec <__vector_6+0x104>
 9ce:	c0 e0       	ldi	r28, 0x00	; 0
		{
			DATA[i] = spi_fast_shift(0);
 9d0:	0c 2f       	mov	r16, r28
 9d2:	10 e0       	ldi	r17, 0x00	; 0
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14spi_fast_shifth>
 9da:	f8 01       	movw	r30, r16
 9dc:	ed 5e       	subi	r30, 0xED	; 237
 9de:	fe 4f       	sbci	r31, 0xFE	; 254
 9e0:	80 83       	st	Z, r24
		ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
		ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
		
		//interruptHook(CTLbyte);     // TWS: hook to derived class interrupt function

		for (uint8_t i = 0; i < DATALEN; i++)
 9e2:	cf 5f       	subi	r28, 0xFF	; 255
 9e4:	80 91 12 01 	lds	r24, 0x0112
 9e8:	c8 17       	cp	r28, r24
 9ea:	90 f3       	brcs	.-28     	; 0x9d0 <__vector_6+0xe8>
		{
			DATA[i] = spi_fast_shift(0);
		}
		if (DATALEN < RF69_MAX_DATA_LEN) DATA[DATALEN] = 0; // add null at end of string
 9ec:	80 91 12 01 	lds	r24, 0x0112
 9f0:	8d 33       	cpi	r24, 0x3D	; 61
 9f2:	30 f4       	brcc	.+12     	; 0xa00 <__vector_6+0x118>
 9f4:	e0 91 12 01 	lds	r30, 0x0112
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	ed 5e       	subi	r30, 0xED	; 237
 9fc:	fe 4f       	sbci	r31, 0xFE	; 254
 9fe:	10 82       	st	Z, r1
		unselect();
 a00:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z8unselectv>
		setMode(RF69_MODE_RX);
 a04:	83 e0       	ldi	r24, 0x03	; 3
 a06:	0e 94 c3 01 	call	0x386	; 0x386 <_Z7setModeh>
	}
	RSSI = readRSSI();
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	0e 94 3e 02 	call	0x47c	; 0x47c <_Z8readRSSIh>
 a10:	90 93 0c 01 	sts	0x010C, r25
 a14:	80 93 0b 01 	sts	0x010B, r24
	inISR = 0;
 a18:	10 92 04 01 	sts	0x0104, r1
 a1c:	ff 91       	pop	r31
 a1e:	ef 91       	pop	r30
 a20:	cf 91       	pop	r28
 a22:	bf 91       	pop	r27
 a24:	af 91       	pop	r26
 a26:	9f 91       	pop	r25
 a28:	8f 91       	pop	r24
 a2a:	7f 91       	pop	r23
 a2c:	6f 91       	pop	r22
 a2e:	5f 91       	pop	r21
 a30:	4f 91       	pop	r20
 a32:	3f 91       	pop	r19
 a34:	2f 91       	pop	r18
 a36:	1f 91       	pop	r17
 a38:	0f 91       	pop	r16
 a3a:	0f 90       	pop	r0
 a3c:	0f be       	out	0x3f, r0	; 63
 a3e:	0f 90       	pop	r0
 a40:	1f 90       	pop	r1
 a42:	18 95       	reti

00000a44 <_Z11lcd_commandh>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
 a44:	60 e0       	ldi	r22, 0x00	; 0
 a46:	0e 94 65 00 	call	0xca	; 0xca <_ZL9lcd_writehh>
 a4a:	08 95       	ret

00000a4c <_Z10lcd_clrscrv>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	0e 94 22 05 	call	0xa44	; 0xa44 <_Z11lcd_commandh>
 a52:	08 95       	ret

00000a54 <_Z8lcd_putcc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
 a54:	61 e0       	ldi	r22, 0x01	; 1
 a56:	0e 94 65 00 	call	0xca	; 0xca <_ZL9lcd_writehh>
 a5a:	08 95       	ret

00000a5c <_Z8lcd_putsPKc>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
 a5c:	cf 93       	push	r28
 a5e:	df 93       	push	r29
    register char c;

    while ((c=*s++)) 
 a60:	ec 01       	movw	r28, r24
 a62:	21 96       	adiw	r28, 0x01	; 1
 a64:	fc 01       	movw	r30, r24
 a66:	80 81       	ld	r24, Z
 a68:	88 23       	and	r24, r24
 a6a:	29 f0       	breq	.+10     	; 0xa76 <_Z8lcd_putsPKc+0x1a>
      lcd_putc(c);
 a6c:	0e 94 2a 05 	call	0xa54	; 0xa54 <_Z8lcd_putcc>
*************************************************************************/
void lcd_puts(const char *s)
  {
    register char c;

    while ((c=*s++)) 
 a70:	89 91       	ld	r24, Y+
 a72:	81 11       	cpse	r24, r1
 a74:	fb cf       	rjmp	.-10     	; 0xa6c <_Z8lcd_putsPKc+0x10>
      lcd_putc(c);
  }
 a76:	df 91       	pop	r29
 a78:	cf 91       	pop	r28
 a7a:	08 95       	ret

00000a7c <_Z8lcd_initv>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 a7c:	e1 e6       	ldi	r30, 0x61	; 97
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	80 81       	ld	r24, Z
 a82:	80 62       	ori	r24, 0x20	; 32
 a84:	80 83       	st	Z, r24
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
 a86:	80 81       	ld	r24, Z
 a88:	80 64       	ori	r24, 0x40	; 64
 a8a:	80 83       	st	Z, r24
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
    #endif
    lcd_db7_ddr_high();
 a8c:	80 81       	ld	r24, Z
 a8e:	82 60       	ori	r24, 0x02	; 2
 a90:	80 83       	st	Z, r24
    lcd_db6_ddr_high();
 a92:	80 81       	ld	r24, Z
 a94:	84 60       	ori	r24, 0x04	; 4
 a96:	80 83       	st	Z, r24
    lcd_db5_ddr_high();
 a98:	80 81       	ld	r24, Z
 a9a:	88 60       	ori	r24, 0x08	; 8
 a9c:	80 83       	st	Z, r24
    lcd_db4_ddr_high();
 a9e:	80 81       	ld	r24, Z
 aa0:	80 61       	ori	r24, 0x10	; 16
 aa2:	80 83       	st	Z, r24
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 aa4:	e2 e6       	ldi	r30, 0x62	; 98
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	80 81       	ld	r24, Z
 aaa:	8f 7d       	andi	r24, 0xDF	; 223
 aac:	80 83       	st	Z, r24
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
    lcd_rs_port_low();
 aae:	80 81       	ld	r24, Z
 ab0:	8f 7b       	andi	r24, 0xBF	; 191
 ab2:	80 83       	st	Z, r24
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
 ab4:	80 81       	ld	r24, Z
 ab6:	82 60       	ori	r24, 0x02	; 2
 ab8:	80 83       	st	Z, r24
    lcd_db6_port_high();
 aba:	80 81       	ld	r24, Z
 abc:	84 60       	ori	r24, 0x04	; 4
 abe:	80 83       	st	Z, r24
    lcd_db5_port_high();
 ac0:	80 81       	ld	r24, Z
 ac2:	88 60       	ori	r24, 0x08	; 8
 ac4:	80 83       	st	Z, r24
    lcd_db4_port_high();
 ac6:	80 81       	ld	r24, Z
 ac8:	80 61       	ori	r24, 0x10	; 16
 aca:	80 83       	st	Z, r24
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
 acc:	8f e2       	ldi	r24, 0x2F	; 47
 ace:	95 e7       	ldi	r25, 0x75	; 117
 ad0:	01 97       	sbiw	r24, 0x01	; 1
 ad2:	f1 f7       	brne	.-4      	; 0xad0 <_Z8lcd_initv+0x54>
 ad4:	00 c0       	rjmp	.+0      	; 0xad6 <_Z8lcd_initv+0x5a>
 ad6:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
 ad8:	80 81       	ld	r24, Z
 ada:	8d 7f       	andi	r24, 0xFD	; 253
 adc:	80 83       	st	Z, r24
    lcd_db6_port_low();
 ade:	80 81       	ld	r24, Z
 ae0:	8b 7f       	andi	r24, 0xFB	; 251
 ae2:	80 83       	st	Z, r24
    Delay_ns(100);
 ae4:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 ae6:	80 81       	ld	r24, Z
 ae8:	80 62       	ori	r24, 0x20	; 32
 aea:	80 83       	st	Z, r24
    //Initialize Display
    lcd_db7_port_low();
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
 aec:	00 c0       	rjmp	.+0      	; 0xaee <_Z8lcd_initv+0x72>
 aee:	00 c0       	rjmp	.+0      	; 0xaf0 <_Z8lcd_initv+0x74>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 af0:	80 81       	ld	r24, Z
 af2:	8f 7d       	andi	r24, 0xDF	; 223
 af4:	80 83       	st	Z, r24
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(4100);
 af6:	87 e0       	ldi	r24, 0x07	; 7
 af8:	90 e2       	ldi	r25, 0x20	; 32
 afa:	01 97       	sbiw	r24, 0x01	; 1
 afc:	f1 f7       	brne	.-4      	; 0xafa <_Z8lcd_initv+0x7e>
 afe:	00 c0       	rjmp	.+0      	; 0xb00 <_Z8lcd_initv+0x84>
 b00:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 b02:	80 81       	ld	r24, Z
 b04:	80 62       	ori	r24, 0x20	; 32
 b06:	80 83       	st	Z, r24
    lcd_e_port_low();

    Delay_us(4100);

    lcd_e_port_high();
    Delay_ns(500);
 b08:	00 c0       	rjmp	.+0      	; 0xb0a <_Z8lcd_initv+0x8e>
 b0a:	00 c0       	rjmp	.+0      	; 0xb0c <_Z8lcd_initv+0x90>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 b0c:	80 81       	ld	r24, Z
 b0e:	8f 7d       	andi	r24, 0xDF	; 223
 b10:	80 83       	st	Z, r24

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(100);
 b12:	87 ec       	ldi	r24, 0xC7	; 199
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	01 97       	sbiw	r24, 0x01	; 1
 b18:	f1 f7       	brne	.-4      	; 0xb16 <_Z8lcd_initv+0x9a>
 b1a:	00 c0       	rjmp	.+0      	; 0xb1c <_Z8lcd_initv+0xa0>
 b1c:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 b1e:	80 81       	ld	r24, Z
 b20:	80 62       	ori	r24, 0x20	; 32
 b22:	80 83       	st	Z, r24
    lcd_e_port_low();

    Delay_us(100);

    lcd_e_port_high();
    Delay_ns(500);
 b24:	00 c0       	rjmp	.+0      	; 0xb26 <_Z8lcd_initv+0xaa>
 b26:	00 c0       	rjmp	.+0      	; 0xb28 <_Z8lcd_initv+0xac>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 b28:	80 81       	ld	r24, Z
 b2a:	8f 7d       	andi	r24, 0xDF	; 223
 b2c:	80 83       	st	Z, r24

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(40);
 b2e:	9a e6       	ldi	r25, 0x6A	; 106
 b30:	9a 95       	dec	r25
 b32:	f1 f7       	brne	.-4      	; 0xb30 <_Z8lcd_initv+0xb4>
 b34:	00 c0       	rjmp	.+0      	; 0xb36 <_Z8lcd_initv+0xba>

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
 b36:	80 81       	ld	r24, Z
 b38:	8f 7e       	andi	r24, 0xEF	; 239
 b3a:	80 83       	st	Z, r24
      Delay_ns(100);
 b3c:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 b3e:	80 81       	ld	r24, Z
 b40:	80 62       	ori	r24, 0x20	; 32
 b42:	80 83       	st	Z, r24
    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 b44:	00 c0       	rjmp	.+0      	; 0xb46 <_Z8lcd_initv+0xca>
 b46:	00 c0       	rjmp	.+0      	; 0xb48 <_Z8lcd_initv+0xcc>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 b48:	80 81       	ld	r24, Z
 b4a:	8f 7d       	andi	r24, 0xDF	; 223
 b4c:	80 83       	st	Z, r24
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 b4e:	8a e6       	ldi	r24, 0x6A	; 106
 b50:	8a 95       	dec	r24
 b52:	f1 f7       	brne	.-4      	; 0xb50 <_Z8lcd_initv+0xd4>
 b54:	00 c0       	rjmp	.+0      	; 0xb56 <_Z8lcd_initv+0xda>

      lcd_db4_port_low();
 b56:	80 81       	ld	r24, Z
 b58:	8f 7e       	andi	r24, 0xEF	; 239
 b5a:	80 83       	st	Z, r24
      Delay_ns(100);
 b5c:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 b5e:	80 81       	ld	r24, Z
 b60:	80 62       	ori	r24, 0x20	; 32
 b62:	80 83       	st	Z, r24
      Delay_us(40);

      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 b64:	00 c0       	rjmp	.+0      	; 0xb66 <_Z8lcd_initv+0xea>
 b66:	00 c0       	rjmp	.+0      	; 0xb68 <_Z8lcd_initv+0xec>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 b68:	80 81       	ld	r24, Z
 b6a:	8f 7d       	andi	r24, 0xDF	; 223
 b6c:	80 83       	st	Z, r24
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_ns(500);
 b6e:	00 c0       	rjmp	.+0      	; 0xb70 <_Z8lcd_initv+0xf4>
 b70:	00 c0       	rjmp	.+0      	; 0xb72 <_Z8lcd_initv+0xf6>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
 b72:	80 81       	ld	r24, Z
 b74:	82 60       	ori	r24, 0x02	; 2
 b76:	80 83       	st	Z, r24
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
 b78:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 b7a:	80 81       	ld	r24, Z
 b7c:	80 62       	ori	r24, 0x20	; 32
 b7e:	80 83       	st	Z, r24
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 b80:	00 c0       	rjmp	.+0      	; 0xb82 <_Z8lcd_initv+0x106>
 b82:	00 c0       	rjmp	.+0      	; 0xb84 <_Z8lcd_initv+0x108>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 b84:	80 81       	ld	r24, Z
 b86:	8f 7d       	andi	r24, 0xDF	; 223
 b88:	80 83       	st	Z, r24

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 b8a:	9a e6       	ldi	r25, 0x6A	; 106
 b8c:	9a 95       	dec	r25
 b8e:	f1 f7       	brne	.-4      	; 0xb8c <_Z8lcd_initv+0x110>
 b90:	00 c0       	rjmp	.+0      	; 0xb92 <_Z8lcd_initv+0x116>
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
 b92:	88 e0       	ldi	r24, 0x08	; 8
 b94:	0e 94 22 05 	call	0xa44	; 0xa44 <_Z11lcd_commandh>

    //Display Clear
    lcd_clrscr();
 b98:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z10lcd_clrscrv>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 b9c:	86 e0       	ldi	r24, 0x06	; 6
 b9e:	0e 94 22 05 	call	0xa44	; 0xa44 <_Z11lcd_commandh>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 ba2:	8c e0       	ldi	r24, 0x0C	; 12
 ba4:	0e 94 22 05 	call	0xa44	; 0xa44 <_Z11lcd_commandh>
 ba8:	08 95       	ret

00000baa <main>:
#define NETWORKID 33
#define NODEID    4
#define TONODEID  3

int main(void)
{
 baa:	cf 93       	push	r28
 bac:	df 93       	push	r29
 bae:	cd b7       	in	r28, 0x3d	; 61
 bb0:	de b7       	in	r29, 0x3e	; 62
 bb2:	60 97       	sbiw	r28, 0x10	; 16
 bb4:	0f b6       	in	r0, 0x3f	; 63
 bb6:	f8 94       	cli
 bb8:	de bf       	out	0x3e, r29	; 62
 bba:	0f be       	out	0x3f, r0	; 63
 bbc:	cd bf       	out	0x3d, r28	; 61
	// initialize RFM69
	rfm69_init(NODEID,NETWORKID);
 bbe:	61 e2       	ldi	r22, 0x21	; 33
 bc0:	84 e0       	ldi	r24, 0x04	; 4
 bc2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z10rfm69_inithh>
	setHighPower(1); // if model number rfm69hw; last two char have hw.
 bc6:	81 e0       	ldi	r24, 0x01	; 1
 bc8:	0e 94 22 02 	call	0x444	; 0x444 <_Z12setHighPowerh>
	setPowerLevel(30); // 0-31; 5dBm to 20 dBm 
 bcc:	8e e1       	ldi	r24, 0x1E	; 30
 bce:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z13setPowerLevelh>
	encrypt(NULL); // if set has to be 16 bytes. example: "1234567890123456"
 bd2:	80 e0       	ldi	r24, 0x00	; 0
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z7encryptPKc>
	
	// initialize 16x2 LCD
	lcd_init();
 bda:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_Z8lcd_initv>
	lcd_clrscr();
 bde:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z10lcd_clrscrv>
 be2:	ce 01       	movw	r24, r28
 be4:	01 96       	adiw	r24, 0x01	; 1
 be6:	7c 01       	movw	r14, r24
 be8:	8e 01       	movw	r16, r28
 bea:	0f 5e       	subi	r16, 0xEF	; 239
 bec:	1f 4f       	sbci	r17, 0xFF	; 255
#define NETWORKID 33
#define NODEID    4
#define TONODEID  3

int main(void)
{
 bee:	c8 2e       	mov	r12, r24
 bf0:	df 2c       	mov	r13, r15
	lcd_init();
	lcd_clrscr();
	  
    while (1) 
    {
		if(receiveDone())
 bf2:	0e 94 92 02 	call	0x524	; 0x524 <_Z11receiveDonev>
 bf6:	88 23       	and	r24, r24
 bf8:	e1 f3       	breq	.-8      	; 0xbf2 <main+0x48>
 bfa:	8f e1       	ldi	r24, 0x1F	; 31
 bfc:	9e e4       	ldi	r25, 0x4E	; 78
 bfe:	01 97       	sbiw	r24, 0x01	; 1
 c00:	f1 f7       	brne	.-4      	; 0xbfe <main+0x54>
 c02:	00 c0       	rjmp	.+0      	; 0xc04 <main+0x5a>
 c04:	00 00       	nop
		{
			_delay_ms(10);
			if(ACKRequested())
 c06:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z12ACKRequestedv>
 c0a:	88 23       	and	r24, r24
 c0c:	b9 f0       	breq	.+46     	; 0xc3c <main+0x92>
				sendACK();
 c0e:	60 e0       	ldi	r22, 0x00	; 0
 c10:	83 e0       	ldi	r24, 0x03	; 3
 c12:	91 e0       	ldi	r25, 0x01	; 1
 c14:	0e 94 18 04 	call	0x830	; 0x830 <_Z7sendACKPKvh>
 c18:	11 c0       	rjmp	.+34     	; 0xc3c <main+0x92>
 c1a:	df 01       	movw	r26, r30
 c1c:	ae 19       	sub	r26, r14
 c1e:	bf 09       	sbc	r27, r15
			char stringData[16];
			for(uint8_t i=0;i<16;i++) // max 16 digit can be shown in this case
			{
				stringData[i]=DATA[i];
 c20:	ad 5e       	subi	r26, 0xED	; 237
 c22:	be 4f       	sbci	r27, 0xFE	; 254
 c24:	2c 91       	ld	r18, X
 c26:	21 93       	st	Z+, r18
		{
			_delay_ms(10);
			if(ACKRequested())
				sendACK();
			char stringData[16];
			for(uint8_t i=0;i<16;i++) // max 16 digit can be shown in this case
 c28:	e0 17       	cp	r30, r16
 c2a:	f1 07       	cpc	r31, r17
 c2c:	b1 f7       	brne	.-20     	; 0xc1a <main+0x70>
			{
				stringData[i]=DATA[i];
			}
			lcd_clrscr();
 c2e:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z10lcd_clrscrv>
			lcd_puts(stringData);
 c32:	8c 2d       	mov	r24, r12
 c34:	9d 2d       	mov	r25, r13
 c36:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z8lcd_putsPKc>
 c3a:	db cf       	rjmp	.-74     	; 0xbf2 <main+0x48>
#define NETWORKID 33
#define NODEID    4
#define TONODEID  3

int main(void)
{
 c3c:	ec 2d       	mov	r30, r12
 c3e:	fd 2d       	mov	r31, r13
 c40:	ec cf       	rjmp	.-40     	; 0xc1a <main+0x70>

00000c42 <_exit>:
 c42:	f8 94       	cli

00000c44 <__stop_program>:
 c44:	ff cf       	rjmp	.-2      	; 0xc44 <__stop_program>
